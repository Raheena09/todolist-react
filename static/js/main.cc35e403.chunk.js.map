{"version":3,"sources":["Components/TodoForm.js","Components/Todo.js","Components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodo","updatedTodos","removeOne","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc35e403.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nfunction TodoForm(props) {\r\n  // const [input, setInput] = useState(props.edit? props.edit.value:'');\r\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n  const inputRef = useRef();\r\n\r\n  useEffect(() => {\r\n    // Explicitly focus the text input\r\n   //  accessing \"current\" to get the DOM node\r\n    inputRef.current.focus()\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    //  Under the function 'handleChange\",changes the value of the state named input and display in textfield\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    //   preventing to reload the page after clicking submit button\r\n    e.preventDefault();\r\n\r\n    //   sending id and text through props in addTodo function of TodoList.js\r\n    props.onSubmit({\r\n      //   generating random id number between the range of 0 to 10000\r\n      id: Math.floor(Math.random() * 10000),\r\n      text: input,\r\n    });\r\n    setInput(\"\");\r\n  };\r\n  return (\r\n  \r\n    <form onSubmit={handleSubmit} className='todo-form'>\r\n    {props.edit ? (\r\n      <>\r\n      <div className=\"edit-inputfield\">\r\n        <input\r\n          placeholder='Update your item'\r\n          value={input}\r\n          onChange={handleChange}\r\n          name='text'\r\n          ref={inputRef}\r\n          className='todo-input edit'\r\n        />\r\n        <button onClick={handleSubmit} className='todo-button edit'>\r\n          Update\r\n        </button>\r\n        </div>\r\n      </>\r\n    ) : (\r\n      <>\r\n        <input\r\n          placeholder='Add a todo'\r\n          value={input}\r\n          onChange={handleChange}\r\n          name='text'\r\n          className='todo-input'\r\n          ref={inputRef}\r\n        />\r\n        <button onClick={handleSubmit} className='todo-button'>\r\n          Add todo\r\n        </button>\r\n      </>\r\n    )}\r\n  </form>\r\n    \r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from \"react\";\r\nimport { RiCloseCircleLine } from \"react-icons/ri\";\r\nimport { AiFillEdit } from \"react-icons/ai\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport { IoCheckmarkDoneOutline } from \"react-icons/io5\";\r\n\r\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: \"\",\r\n  });\r\n\r\n  const submitUpdate = (value) => {\r\n    updateTodo(edit.id, value);\r\n\r\n    // again needed to set the edit state null\r\n    // because it must be indicated that after updating there is not anything to be updated left\r\n    setEdit({\r\n      id: null,\r\n      value: \"\",\r\n    });\r\n  };\r\n\r\n  // if there is some value except of null in id of state named edit\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n \r\n\r\n  return todos.map((todo, index) => (\r\n    <div\r\n      className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"}\r\n      key={index}\r\n    >\r\n      <div>{todo.text}</div>\r\n      <div className=\"icons\">\r\n        <RiCloseCircleLine\r\n          onClick={() => removeTodo(todo.id)}\r\n          className=\"remove-icon\"\r\n        />\r\n        <AiFillEdit\r\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n          className=\"edit-icon\"\r\n        />\r\n        <IoCheckmarkDoneOutline\r\n          key={todo.id}\r\n          onClick={() => completeTodo(todo.id)}\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n};\r\nexport default Todo;\r\n","import React,{useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\n\r\nfunction TodoList() {\r\n    \r\n  const [todos,setTodos]=useState([]);\r\n\r\n  const addTodo = todo =>{\r\n\r\n    // prevents empty data to be displayed i.e. doesnot accepts if only space is typed\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      return;\r\n    }\r\n    //  \" ...todos\" contains the previously typed list \r\n      const newTodo=[ ...todos, todo];\r\n      setTodos(newTodo)\r\n\r\n\r\n    //   console.log(newTodo);\r\n  }\r\n\r\n \r\n  \r\n\r\n// todoId from edit.id and  newValue from value which is in todo.js\r\nconst updateTodo = (todoId, newValue) => {\r\n\r\n  // prevents empty data to be displayed i.e. doesnot accepts if only space is typed\r\n  if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n    return;\r\n  } \r\n    // if item.id matches with the clicked id, then it will replace the newValue passed , otherwise no change \r\n    setTodos(prev =>prev.map(item => (item.id === todoId ? newValue : item)));\r\n   \r\n   \r\n\r\n};\r\n\r\n  const completeTodo = id =>{\r\n     let updatedTodos= todos.map(todo=>{\r\n          if(todo.id === id){\r\n            //   compares between id of the list of todo state (todo.id) with tha id passed in the function named completeTodo \r\n              todo.isComplete = !todo.isComplete;\r\n            //   toggle function (opposite of the current state)\r\n          }\r\n          return todo;\r\n      })\r\n      setTodos(updatedTodos);\r\n    //   console.log(updatedTodos);\r\n  }\r\n\r\n\r\n  const removeTodo =id =>{\r\n    //   gives new list or array by selecting the only those todo whose id does not matches the clicked ones ->use of filter\r\n    // this excludes the clicked one in the list \r\n      const removeOne= todos.filter(todo => todo.id!=id);\r\n      setTodos(removeOne);\r\n  }\r\n    return (\r\n        <div >\r\n            <h1>Todo List</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;\r\n","import \"./App.css\";\nimport {Route, Switch } from 'react-router-dom';\nimport All from './Components/All';\nimport TodoList from \"./Components/TodoList\";\n\n\nfunction App() {\n  return (\n    // <main>\n    //   <Switch>\n    //   <Route path=\"/\" component={All} exact />\n\n    //   </Switch>\n    // </main>\n\n    <div className=\"Todo-App\">\n        <TodoList />\n      </div>\n    \n   \n  );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <BrowserRouter> */}\n    <App />\n    {/* </BrowserRouter> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}